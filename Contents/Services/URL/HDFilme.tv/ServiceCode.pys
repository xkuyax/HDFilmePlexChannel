VIDEO_URL_CACHE = 'http://localhost:8087/videoUrl?cache=true&link=%s'
VIDEO_URL_NON_CACHE = 'http://localhost:8087/videoUrl?cache=false&link=%s'
FILMINFO_URL = 'http://localhost:8087/filmInfo?link=%s'
REST_API_THUMBNAIL = 'http://localhost:8087/thumbnail?link=%s'

HTTP_HEADERS = {
	'Client-ID': 'gzux2tt85x9ppnnxyh7czkfiovtxtd7'
}

####################################################################################################
def NormalizeURL(url):

	return url;

####################################################################################################
def MetadataObjectForURL(url):
	Log("16")
	try:
		token = JSON.ObjectFromURL(FILMINFO_URL % (url), cacheTime=0)
	except:
		raise Ex.MediaNotAvailable
	return VideoClipObject(
		title = token['title'],
		summary = token['description'],
		thumb = Resource.ContentsOfURLWithFallback(REST_API_THUMBNAIL % url)
	)

####################################################################################################
def MediaObjectsForURL(url):
	Log("41")
	Log(url)
	try:
		token = JSON.ObjectFromURL(VIDEO_URL_CACHE % (url), cacheTime=0)
	except:
		raise Ex.MediaNotAvailable
	return [
		MediaObject(
			parts = [PartObject(key=Callback(PlayVideo, url=url))],
			video_resolution = token['label'],
			container = Container.MP4,
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			audio_channels = 2,
			optimized_for_streaming = True
		)
	]

####################################################################################################
@indirect
def PlayVideo(url, **kwargs):
	Log("58")
	try:
		token = JSON.ObjectFromURL(VIDEO_URL_NON_CACHE % (url), cacheTime=0)
	except:
		raise Ex.MediaNotAvailable
	video_url = token['file']
	Log(' --> Final video_url: %s' % (video_url))
	return IndirectResponse(VideoClipObject, key=video_url)
